/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layers
#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3

&mt {
        quick-tap-ms = <200>;
};

&lt {
        flavor = "hold-preferred";
};

&sk {
    release-after-ms = <500>;
    quick-release;
};

&caps_word {
        continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>; 
        mods-trigger-aux-keycodes = <SEMICOLON>; // semicolon to support colemak
};

/ {
        behaviors {
                hml: homerow_mods_left {
                        compatible = "zmk,behavior-hold-tap";
                        label = "LEFT_HOMEROW_MODS";
                        #binding-cells = <2>;
                        tapping-term-ms = <150>;
                        quick-tap-ms = <125>;
                        global-quick-tap;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                        hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
                };
                hmr: homerow_mods_right {
                        compatible = "zmk,behavior-hold-tap";
                        label = "RIGHT_HOMEROW_MODS";
                        #binding-cells = <2>;
                        tapping-term-ms = <150>;
                        quick-tap-ms = <125>;
                        global-quick-tap;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                        hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
                };
                th: thumb_hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "THUMB_LAYER_TAPS";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <200>;
                        flavor = "hold-preferred";
                        bindings = <&mo>, <&kp>;
                };
        };

        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };

        macros {
                ZMK_MACRO(wv_next, bindings = <&macro_press &kp LCTL &kp LGUI>, <&macro_tap &kp RIGHT>, <&macro_release &kp LCTL &kp LGUI>;)
                ZMK_MACRO(wv_prev, bindings = <&macro_press &kp LCTL &kp LGUI>, <&macro_tap &kp LEFT>, <&macro_release &kp LCTL &kp LGUI>;)
                ZMK_MACRO(mv_next, bindings = <&macro_press &kp LGUI>, <&macro_tap &kp RIGHT>, <&macro_release &kp LGUI>;)
                ZMK_MACRO(mv_prev, bindings = <&macro_press &kp LGUI>, <&macro_tap &kp LEFT>, <&macro_release &kp LGUI>;)
                ZMK_MACRO(fat_arrow, bindings = <&kp EQUAL &kp GT>;)
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
                        bindings = <
   &kp GRAVE    &kp Q   &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P           &kp LBKT
   &kp ESC      &kp A   &hml LGUI S     &hml LALT D     &hml LCTL F     &kp G           &kp H           &hmr RCTL J     &hmr LALT K     &hmr RGUI L     &kp SEMI        &kp SQT
   &sk LSFT     &kp Z   &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &kp RBKT
                                        &th RAISE TAB   &lt LOWER SPACE &mt LSFT DEL    &mt RSFT BSPC   &lt LOWER RET   &th RAISE TAB
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------
                        bindings = <
   &kp EXCL     &kp AT  &kp HASH        &kp DLLR        &kp PRCNT       &kp CARET       &kp AMPS        &kp STAR        &kp LPAR        &kp RPAR        &kp UNDER       &kp PLUS
   &caps_word   &kp N1  &hml LGUI N2    &hml LALT N3    &hml LCTL N4    &kp N5          &kp MINUS       &hmr RCTL LBKT  &hmr LALT LBRC  &hmr RGUI RBRC  &kp RBKT        &kp PIPE
   &trans       &kp N6  &kp N7          &kp N8          &kp N9          &kp N0          &kp EQUAL       &fat_arrow      &kp LT          &kp GT          &kp DOT         &kp BSLH
                                        &trans          &trans          &trans          &trans          &trans          &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
                        bindings = <
   &kp F1               &kp F2          &kp F3          &kp F4          &kp F5          &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &kp F11 &kp F12
   &trans               &kp C_MUTE      &hml LGUI C_PREV &hml LALT C_PP &hml LCTL C_NEXT &kp C_VOL_UP   &kp LEFT        &hmr RCTL DOWN  &hmr LALT UP    &hmr RGUI RIGHT &trans  &kp PSCRN
   &kp LS(LCTRL)        &kp INS         &trans          &wv_prev        &wv_next        &kp C_VOL_DN    &kp HOME        &kp PG_DN       &kp PG_UP       &kp END         &trans  &kp SLCK
                          	                        &trans          &trans          &trans          &trans          &trans          &trans
                        >;
                };
                
                adjust_layer {
// -----------------------------------------------------------------------------------------
                        bindings = <
   &reset       &bootloader     &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &bootloader     &reset
   &bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_SEL 4    &bt BT_SEL 3    &bt BT_SEL 2    &bt BT_SEL 1    &bt BT_SEL 0    &bt BT_CLR
   &out OUT_BLE &out OUT_USB    &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &out OUT_USB    &out OUT_BLE
                          	                &trans          &trans          &trans          &trans          &trans          &trans
                        >;
                };
        };
};
